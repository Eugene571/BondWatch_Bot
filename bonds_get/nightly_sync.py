# bonds_get/nightly_sync.py

import logging
from datetime import datetime, date
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from database.db import get_session, BondsDatabase
from bonds_get.moex_lookup import get_bondization_data_from_moex

logger = logging.getLogger("nightly_sync")


async def needs_update(bond: BondsDatabase) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ bond_update)"""
    today = date.today()

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç maturity_date
    if bond.maturity_date is None:
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç (–∫—É–ø–æ–Ω, –æ—Ñ–µ—Ä—Ç–∞, –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è)
    date_fields = [
        bond.next_coupon_date,
        bond.offer_date,
        bond.amortization_date
    ]

    if any(d and d <= today for d in date_fields):
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
    empty_fields = [
        bond.next_coupon_date,
        bond.next_coupon_value,
        bond.offer_date,
        bond.amortization_date,
        bond.amortization_value
    ]

    return any(field is None for field in empty_fields)


async def update_bond_data(bond: BondsDatabase, session: AsyncSession):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ bond_update)"""
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {bond.isin}")
        data = await get_bondization_data_from_moex(bond.isin)
        today = date.today()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        updates_made = False
        if data.get("maturity_date"):
            bond.maturity_date = data["maturity_date"]
            updates_made = True
            logger.info(f"üìÖ –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {bond.maturity_date}")

        if data.get("next_offer_date"):
            bond.offer_date = data["next_offer_date"]
            updates_made = True
            logger.info(f"üìÜ –î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã: {bond.offer_date}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ø–æ–Ω–æ–≤
        upcoming_coupons = []
        for c in data.get("coupons", []):
            if raw_date := c.get("couponDate"):
                try:
                    parsed_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                    if parsed_date > today:
                        upcoming_coupons.append({
                            "date": parsed_date,
                            "value": c.get("couponValue", 0.0)
                        })
                except ValueError:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –∫—É–ø–æ–Ω–∞: {raw_date}")

        if upcoming_coupons:
            next_coupon = min(upcoming_coupons, key=lambda x: x["date"])
            bond.next_coupon_date = next_coupon["date"]
            bond.next_coupon_value = float(next_coupon["value"])
            logger.info(f"‚úÖ –ö—É–ø–æ–Ω: {bond.next_coupon_date}, {bond.next_coupon_value}")
            updates_made = True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π
        upcoming_amorts = []
        for a in data.get("amortizations", []):
            if a.get("dataSource") == "amortization" and (raw_date := a.get("amortDate")):
                try:
                    parsed_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                    if parsed_date >= today:
                        upcoming_amorts.append({
                            "date": parsed_date,
                            "value": a.get("amortValue", 0.0)
                        })
                except ValueError:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {raw_date}")

        if upcoming_amorts:
            next_amort = min(upcoming_amorts, key=lambda x: x["date"])
            bond.amortization_date = next_amort["date"]
            bond.amortization_value = float(next_amort["value"])
            logger.info(f"‚úÖ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {bond.amortization_date}, {bond.amortization_value}")
            updates_made = True

        if updates_made:
            bond.last_updated = datetime.utcnow()
            await session.commit()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {bond.isin}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {bond.isin}: {e}", exc_info=True)
        await session.rollback()
        raise


async def perform_nightly_sync():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—á–Ω–æ–π —Å–≤–µ—Ä–∫–∏"""
    logger.info("üåô –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–π —Å–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    async with get_session() as session:
        try:
            result = await session.execute(select(BondsDatabase))
            bonds = result.scalars().all()

            for bond in bonds:
                if await needs_update(bond):
                    await update_bond_data(bond, session)
                else:
                    logger.debug(f"‚úì {bond.isin} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        except Exception as e:
            logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    logger.info("üèÅ –°–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")