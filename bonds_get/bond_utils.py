# bonds_get.bond_utils.py
import logging
from typing import Optional

from bonds_get.bond_update import get_next_coupon
from bonds_get.moex_lookup import get_bond_coupons_from_moex
from sqlalchemy.orm import Session
from datetime import datetime

from database.db import BondsDatabase


def process_amortizations(events: dict, current_date: Optional[datetime] = None) -> tuple | None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π –∏ –ø–æ–≥–∞—à–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞—è –±–ª–∏–∂–∞–π—à–µ–µ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
    """
    if current_date is None:
        current_date = datetime.now()

    logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–ª—è –¥–∞—Ç—ã: {current_date}")

    future_amorts = []
    maturity_date = None

    columns = events.get("columns", [])
    logging.info(f"–ö–æ–ª–æ–Ω–∫–∏: {columns}")

    for row in events.get("data", []):
        event = dict(zip(columns, row))  # <-- –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {event}")

        amort_date = event.get("amortdate")
        if amort_date:
            parsed_date = datetime.strptime(amort_date, "%Y-%m-%d").date()
            logging.info(f"–î–∞—Ç–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {parsed_date}")

            if event.get("data_source") == "maturity":
                maturity_date = parsed_date
                logging.info(f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {maturity_date}")

            if parsed_date >= current_date.date():
                future_amorts.append((parsed_date, event.get("value"), event.get("data_source")))
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É–¥—É—â–µ–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {parsed_date}, {event.get('value')}")

    nearest_amort = min(future_amorts, key=lambda x: x[0]) if future_amorts else None

    if nearest_amort:
        logging.info(f"–ë–ª–∏–∂–∞–π—à–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {nearest_amort[0]}, –∑–Ω–∞—á–µ–Ω–∏–µ: {nearest_amort[1]}")
    else:
        logging.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–ª–∏–∂–∞–π—à–∏—Ö –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π.")

    return nearest_amort, maturity_date


def process_offers(events):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–µ—Ä—Ç—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞—Ç).

    :param events: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏–π –æ—Ñ–µ—Ä—Ç
    :return: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ–µ—Ä—Ç
    """
    offers = events['data']
    result = []
    for event in offers:
        offer_date = event.get('offerdate')
        price = event.get('price')
        result.append({
            'offer_date': offer_date,
            'price': price or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        })
    return result


async def save_bond_events(session: Session, tg_user_id: int, events):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–Ω–∞—á–∞—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –æ–±–ª–∏–≥–∞—Ü–∏–∏ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Å MOEX.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ dict (–æ–¥–Ω–∞ –æ–±–ª–∏–≥–∞—Ü–∏—è), —Ç–∞–∫ –∏ list (–Ω–µ—Å–∫–æ–ª—å–∫–æ).
    """
    current_date = datetime.now()

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
    logging.info(f"–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}. –î–∞–Ω–Ω—ã–µ: {events}")

    # –ï—Å–ª–∏ events ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    if isinstance(events, list):
        for item in events:
            await save_bond_events(session, tg_user_id, item)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º
    if not isinstance(events, dict):
        logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ save_bond_events: {events}")
        return

    isin = events.get("isin")
    name = events.get("name")

    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ISIN = {isin}, Name = {name}")

    if not isin:
        logging.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω ISIN, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        return

    bond = session.query(BondsDatabase).filter_by(isin=isin).first()

    if not bond:
        logging.info(f"–û–±–ª–∏–≥–∞—Ü–∏—è —Å ISIN {isin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.")
        bond = BondsDatabase(
            isin=isin,
            name=name,
            added_at=datetime.utcnow(),
        )
        session.add(bond)
        session.flush()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ø–æ–Ω —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    await get_next_coupon(isin, None, bond, session)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞
    if "columns" in events and "data" in events:
        amortizations = events
        logging.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑ —Å–æ–±—ã—Ç–∏–π: 'columns' –∏ 'data'.")
    else:
        amortizations = events.get("amortizations", {})
        logging.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")

    next_amort_event, maturity_date = process_amortizations(amortizations, current_date)

    if next_amort_event:
        bond.amortization_date = next_amort_event[0]
        bond.amortization_value = next_amort_event[1]
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {next_amort_event[0]}, {next_amort_event[1]}")

    if not bond.maturity_date and maturity_date:
        bond.maturity_date = maturity_date
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {maturity_date}")

    bond.last_updated = datetime.utcnow()
    session.commit()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å ISIN {isin} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ.")


def format_bond_info(session: Session, tg_user_id: int, isin: str):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.

    :param session: –°–µ–∞–Ω—Å SQLAlchemy
    :param tg_user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param isin: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–ª–∏–≥–∞—Ü–∏–∏ (ISIN)
    :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏
    """
    bond = (
        session.query(BondsDatabase)
        .filter_by(user_id=tg_user_id, isin=isin)
        .first()
    )

    if bond:
        message = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {isin}:\n\n"
        if bond.next_coupon_date:
            message += f"üìù –°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω:\n- –î–∞—Ç–∞: {bond.next_coupon_date}\n- –†–∞–∑–º–µ—Ä –∫—É–ø–æ–Ω–∞: {bond.next_coupon_value:.2f} —Ä—É–±.\n"
        else:
            message += "–°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—à—ë–ª.\n"
    else:
        message = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {isin}.\n"

    return message