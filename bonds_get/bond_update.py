# bonds_get.bond_update
from datetime import datetime, timedelta
import logging
from sqlalchemy.orm import Session
from bonds_get.moex_lookup import get_bond_coupons_from_moex
from database.db import BondsDatabase


async def get_next_coupon(isin: str, figi: str | None, bond: BondsDatabase, session: Session) -> None:
    today = datetime.today().date()

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω—ã —á–µ—Ä–µ–∑ MOEX
    try:
        coupons = await get_bond_coupons_from_moex(isin)
        logging.debug(f"üßæ –í—Å–µ –∫—É–ø–æ–Ω—ã –æ—Ç MOEX –¥–ª—è {isin}: {coupons}")

        upcoming = []
        for c in coupons:
            raw_date = c.get("couponDate")
            if not raw_date:
                continue
            try:
                parsed_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                if parsed_date >= today:
                    c["parsed_date"] = parsed_date
                    upcoming.append(c)
            except ValueError:
                logging.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ {raw_date} –æ—Ç MOEX –¥–ª—è {isin}")
                continue

        logging.debug(f"üîç –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É–ø–æ–Ω—ã –æ—Ç MOEX –¥–ª—è {isin}: {upcoming}")

        if upcoming:
            upcoming.sort(key=lambda x: x["parsed_date"])
            first = upcoming[0]
            logging.debug(f"üíæ –ü–µ—Ä–≤—ã–π –∫—É–ø–æ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {first}")
            bond.next_coupon_date = first["parsed_date"]
            bond.next_coupon_value = float(first["couponValue"]) if first.get("couponValue") else None
            session.commit()
            logging.debug(f"üíæ Commit –∑–∞–≤–µ—Ä—à—ë–Ω, –∫—É–ø–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {bond.next_coupon_date}, {bond.next_coupon_value}")
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ MOEX –¥–ª—è {bond.isin}")
            return
    except Exception as e:
        logging.warning(f"‚ùå MOEX –∫—É–ø–æ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {isin}: {e}")

    logging.info(f"‚ùå –ö—É–ø–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {isin}")