# bot.handlers.py
from sqlalchemy.orm import selectinload
from telegram import Update
from telegram.ext import (
    CommandHandler,
    Application,
    ContextTypes,
    filters,
    MessageHandler,
    ConversationHandler,
)
import re
import logging
from datetime import datetime
from bonds_get.moex_lookup import get_bond_coupons_from_moex
from bonds_get.moex_name_lookup import get_bond_name_from_moex
from database.db import get_session, User, BondsDatabase, UserTracking

ISIN_PATTERN = re.compile(r'^[A-Z]{2}[A-Z0-9]{10}$')

AWAITING_ISIN_TO_REMOVE = 1
AWAITING_ISIN_TO_ADD = 2


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    session = get_session()

    db_user = session.query(User).filter_by(tg_id=user.id).first()
    if not db_user:
        db_user = User(tg_id=user.id, full_name=user.full_name)
        session.add(db_user)
        session.commit()
        context.bot_data.get("logger", print)(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø BondWatch ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –∫—É–ø–æ–Ω–∞–º–∏ –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è–º–∏ —Ç–≤–æ–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å ISIN, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –±—É–º–∞–≥—É –∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É–ø–æ–Ω–∞—Ö –∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏.\n"
        "–¢—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ 3 –±—É–º–∞–≥.\n\n"
        "üîî –ù–∞—á–Ω—ë–º!"
    )


async def list_tracked_bonds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User).options(selectinload(User.tracked_bonds)).filter_by(tg_id=update.effective_user.id).first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è–¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add!")
        session.close()
        return

    text = "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥:\n\n"
    for ut in user.tracked_bonds:
        bond = session.query(BondsDatabase).filter_by(isin=ut.isin).first()
        if not bond:
            continue

        name = bond.name or bond.isin
        if not bond.name:
            moex_name = await get_bond_name_from_moex(bond.isin)
            if moex_name:
                bond.name = moex_name
                session.commit()
                name = moex_name

        added = ut.added_at.strftime("%Y-%m-%d")
        next_coupon_text = ""
        if bond.next_coupon_date and bond.next_coupon_value:
            next_coupon_text = f"\nüëâ –°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω: {bond.next_coupon_date} –Ω–∞ —Å—É–º–º—É {bond.next_coupon_value} —Ä—É–±."

        text += f"‚Ä¢ {name} ({bond.isin}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ {added}){next_coupon_text}\n"

    session.close()
    await update.message.reply_text(text)


async def process_add_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip().upper()

    if not ISIN_PATTERN.match(text):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ISIN. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return AWAITING_ISIN_TO_ADD

    session = get_session()
    user_db = session.query(User).filter_by(tg_id=user.id).first()
    if not user_db:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    tracking_count = session.query(UserTracking).filter_by(user_id=user.id).count()
    if tracking_count >= 3:
        await update.message.reply_text("‚ùå –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å 3 –±—É–º–∞–≥–∏. –£–¥–∞–ª–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é.")
        return ConversationHandler.END

    already_tracking = session.query(UserTracking).filter_by(user_id=user.id, isin=text).first()
    if already_tracking:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å —ç—Ç—É –±—É–º–∞–≥—É.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –±—É–º–∞–≥—É
    bond = session.query(BondsDatabase).filter_by(isin=text).first()
    if not bond:
        name = await get_bond_name_from_moex(text)
        bond = BondsDatabase(isin=text, name=name)
        session.add(bond)
        session.commit()

    # –ï—Å–ª–∏ –∫—É–ø–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å MOEX
    if not bond.next_coupon_date or not bond.next_coupon_value:
        try:
            coupons = await get_bond_coupons_from_moex(bond.isin)
            today = datetime.today().date()

            upcoming = [
                {
                    "date": datetime.strptime(c["couponDate"], "%Y-%m-%d").date(),
                    "value": c["couponValue"]
                }
                for c in coupons
                if c.get("couponDate") and datetime.strptime(c["couponDate"], "%Y-%m-%d").date() >= today
            ]

            if upcoming:
                upcoming.sort(key=lambda x: x["date"])
                bond.next_coupon_date = upcoming[0]["date"]
                bond.next_coupon_value = upcoming[0]["value"]
                session.commit()
                logging.info(f"‚úÖ –ö—É–ø–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å MOEX –¥–ª—è {bond.isin}")
        except Exception as e:
            logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤ —Å MOEX –¥–ª—è {bond.isin}: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    tracking = UserTracking(user_id=user.id, isin=bond.isin)
    session.add(tracking)
    session.commit()

    await update.message.reply_text(f"üìå –ë—É–º–∞–≥–∞ {bond.name or bond.isin} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    return AWAITING_ISIN_TO_ADD


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üóë –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return AWAITING_ISIN_TO_REMOVE


async def process_remove_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isin = update.message.text.strip().upper()
    session = get_session()
    user = session.query(User).filter_by(tg_id=update.effective_user.id).first()

    if not user:
        await update.message.reply_text("–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    tracking = session.query(UserTracking).filter_by(user_id=user.tg_id, isin=isin).first()
    if not tracking:
        await update.message.reply_text(f"‚ùå –¢—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –±—É–º–∞–≥—É —Å ISIN {isin}.")
    else:
        session.delete(tracking)
        session.commit()
        await update.message.reply_text(f"‚úÖ –ë—É–º–∞–≥–∞ {isin} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

    return ConversationHandler.END


async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User).options(selectinload(User.tracked_bonds)).filter_by(tg_id=update.effective_user.id).first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è –¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        return

    text = "üìä –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–≤–æ–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º:\n\n"
    for ut in user.tracked_bonds:
        bond = session.query(BondsDatabase).filter_by(isin=ut.isin).first()
        if not bond:
            continue
        name = bond.name or bond.isin
        if bond.next_coupon_date and bond.next_coupon_value:
            text += f"‚Ä¢ {name}:\n  üè∑Ô∏è {bond.next_coupon_date} ‚Äî –∫—É–ø–æ–Ω {bond.next_coupon_value:.2f} —Ä—É–±.\n"
        else:
            text += f"‚Ä¢ {name}:\n  ‚ú® –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"

    await update.message.reply_text(text)


def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_tracked_bonds))
    app.add_handler(CommandHandler("events", show_events))

    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={AWAITING_ISIN_TO_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_add_isin)]},
        fallbacks=[],
    )
    app.add_handler(add_conv)

    remove_conv = ConversationHandler(
        entry_points=[CommandHandler("remove", remove_command)],
        states={AWAITING_ISIN_TO_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_remove_isin)]},
        fallbacks=[],
    )
    app.add_handler(remove_conv)