# bot.handlers.py
import sys

from sqlalchemy import select, func
from sqlalchemy.orm import selectinload
from telegram import Update
from telegram.ext import (
    CommandHandler,
    Application,
    ContextTypes,
    filters,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler
)
import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging

from bonds_get.bond_update import get_next_coupon
from bonds_get.moex_name_lookup import get_bond_name_from_moex
from bot.subscription_utils import check_tracking_limit
from database.db import get_session, User, BondsDatabase, UserTracking, Subscription

ISIN_PATTERN = re.compile(r'^[A-Z]{2}[A-Z0-9]{10}$')

AWAITING_ISIN_TO_REMOVE = 1
AWAITING_ISIN_TO_ADD = 2
AWAITING_QUANTITY = 3
AWAITING_ISIN_TO_CHANGE = 4


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with get_session() as session:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        result = await session.execute(select(User).filter_by(tg_id=user.id))
        db_user = result.scalar()
        if not db_user:
            db_user = User(tg_id=user.id, full_name=user.full_name)
            session.add(db_user)
            await session.commit()
            subscription = Subscription(user_id=user.id, plan="free")
            session.add(subscription)
            await session.commit()
        context.bot_data.get("logger", print)(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø BondWatch ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –∫—É–ø–æ–Ω–∞–º–∏ –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è–º–∏ —Ç–≤–æ–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å ISIN, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –±—É–º–∞–≥—É –∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É–ø–æ–Ω–∞—Ö –∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏.\n"
        "–¢—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å 1 –±—É–º–∞–≥—É.\n\n"
        "üîî –ù–∞—á–Ω—ë–º!"
    )


async def list_tracked_bonds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_session() as session:
        result = await session.execute(
            select(User)
            .options(selectinload(User.tracked_bonds))
            .filter_by(tg_id=update.effective_user.id)
        )
        user = result.scalar()

        if not user or not user.tracked_bonds:
            await update.message.reply_text("‚ùóÔ∏è–¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
            return

        text = "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥:\n\n"
        for ut in user.tracked_bonds:
            bond_result = await session.execute(select(BondsDatabase).filter_by(isin=ut.isin))
            bond = bond_result.scalar()

            name = bond.name or bond.isin
            if not bond.name:
                moex_name = await get_bond_name_from_moex(bond.isin)
                if moex_name:
                    bond.name = moex_name
                    await session.commit()
                    name = moex_name

            text += f"‚Ä¢ {name} - {ut.quantity} –±—É–º–∞–≥ \n({bond.isin}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ {ut.added_at.strftime('%Y-%m-%d')})\n\n"

        await update.message.reply_text(text)


async def process_add_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip().upper()

    if not ISIN_PATTERN.match(text):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ISIN. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return AWAITING_ISIN_TO_ADD

    async with get_session() as session:
        user_result = await session.execute(select(User).filter_by(tg_id=user.id))
        user_db = user_result.scalar()

        if not user_db:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
        if not await check_tracking_limit(user_db.tg_id):
            await update.message.reply_text(
                "‚ùå –õ–∏–º–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥ –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: /upgrade"
            )
            return ConversationHandler.END

        tracking_result = await session.execute(
            select(UserTracking).filter_by(user_id=user_db.tg_id, isin=text)
        )
        if tracking_result.scalar():
            await update.message.reply_text("‚úÖ –≠—Ç–∞ –±—É–º–∞–≥–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            return ConversationHandler.END

        bond_result = await session.execute(select(BondsDatabase).filter_by(isin=text))
        bond = bond_result.scalar()

        if not bond:
            name = await get_bond_name_from_moex(text)
            bond = BondsDatabase(isin=text, name=name)
            session.add(bond)
            await session.commit()

        try:
            coupon = await get_next_coupon(bond.isin, bond.figi, bond, session)
            if coupon:
                bond.next_coupon_date = coupon["date"]
                bond.next_coupon_value = coupon["value"]
                await session.commit()
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞: {e}")

        tracking = UserTracking(user_id=user_db.tg_id, isin=bond.isin)
        session.add(tracking)
        await session.commit()

        context.user_data['isin'] = text
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ –¥–ª—è {bond.name or bond.isin}:")
        return AWAITING_QUANTITY


async def process_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        quantity = int(update.message.text.strip())
        if quantity <= 0:
            raise ValueError

        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_result = await session.execute(
                select(User).filter_by(tg_id=update.effective_user.id)
            )
            bond_result = await session.execute(
                select(BondsDatabase).filter_by(isin=context.user_data['isin'])
            )
            user_db = user_result.scalar()
            bond = bond_result.scalar()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            tracking_result = await session.execute(
                select(UserTracking).filter_by(user_id=user_db.tg_id, isin=bond.isin)
            )
            existing_tracking = tracking_result.scalar()

            if existing_tracking:
                existing_tracking.quantity = quantity
                await session.commit()
                await update.message.reply_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {quantity}")
            else:
                tracking = UserTracking(user_id=user_db.tg_id, isin=bond.isin, quantity=quantity)
                session.add(tracking)
                await session.commit()
                await update.message.reply_text(f"üìå –û–±–ª–∏–≥–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")

        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        return AWAITING_QUANTITY
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
        return ConversationHandler.END


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    return AWAITING_ISIN_TO_ADD


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üóë –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return AWAITING_ISIN_TO_REMOVE


async def process_remove_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isin = update.message.text.strip().upper()
    async with get_session() as session:
        user_result = await session.execute(
            select(User).filter_by(tg_id=update.effective_user.id))
        user = user_result.scalar()

        if not user:
            await update.message.reply_text("–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
            return ConversationHandler.END

        tracking_result = await session.execute(
            select(UserTracking).filter_by(user_id=user.tg_id, isin=isin))
        tracking = tracking_result.scalar()
        if tracking:
            await session.delete(tracking)
            await session.commit()
            await update.message.reply_text(f"‚úÖ –ë—É–º–∞–≥–∞ {isin} —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text(f"‚ùå –ë—É–º–∞–≥–∞ {isin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        return ConversationHandler.END


async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_session() as session:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –±—É–º–∞–≥–∞–º–∏
        user_result = await session.execute(
            select(User)
            .options(selectinload(User.tracked_bonds))
            .filter_by(tg_id=update.effective_user.id))
        user = user_result.scalar()

        if not user or not user.tracked_bonds:
            await update.message.reply_text("‚ùóÔ∏è –¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
            return

        text = "üìä –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–≤–æ–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º:\n\n"
        for ut in user.tracked_bonds:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–∏
            bond_result = await session.execute(
                select(BondsDatabase).filter_by(isin=ut.isin))
            bond = bond_result.scalar()

            if not bond:
                continue

            name = bond.name or bond.isin
            quantity = ut.quantity or 1  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ quantity –º–æ–∂–µ—Ç –±—ã—Ç—å None
            total_coupon = quantity * (bond.next_coupon_value or 0)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è
            event_lines = []
            if bond.next_coupon_date:
                event_lines.append(
                    f"üè∑Ô∏è {bond.next_coupon_date} ‚Äî –∫—É–ø–æ–Ω {bond.next_coupon_value:.2f} —Ä—É–±.\n"
                    f"üí∞ –ò—Ç–æ–≥–æ: {total_coupon:.2f} —Ä—É–±. –¥–ª—è {quantity} –æ–±–ª–∏–≥–∞—Ü–∏–π"
                )

            if bond.maturity_date:
                event_lines.append(f"üí∏üîô {bond.maturity_date} ‚Äî –ø–æ–≥–∞—à–µ–Ω–∏–µ")

            if bond.amortization_date and bond.amortization_value:
                event_lines.append(
                    f"‚¨áÔ∏è –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è {bond.amortization_date} ‚Äî {bond.amortization_value:.2f} —Ä—É–±."
                )
            if bond.offer_date:
                event_lines.append(
                    f"ü§ùüìù –û—Ñ–µ—Ä—Ç–∞ ‚Äî {bond.offer_date}.")

            text += f"‚Ä¢ {name}:\n" + "\n".join(event_lines) + "\n\n" if event_lines else "‚ú® –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π\n\n"

        await update.message.reply_text(text)


async def change_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_session() as session:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –±—É–º–∞–≥–∞–º–∏
        user_result = await session.execute(
            select(User)
            .options(selectinload(User.tracked_bonds))
            .filter_by(tg_id=update.effective_user.id))
        user = user_result.scalar()

        if not user or not user.tracked_bonds:
            await update.message.reply_text("‚ùóÔ∏è –¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
            return

        keyboard = []
        for ut in user.tracked_bonds:
            bond_result = await session.execute(
                select(BondsDatabase).filter_by(isin=ut.isin))
            bond = bond_result.scalar()

            if bond:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{bond.name or bond.isin} ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {ut.quantity}",
                        callback_data=bond.isin
                    )
                ])

        await update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏ –æ–±–ª–∏–≥–∞—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return AWAITING_ISIN_TO_CHANGE


async def process_change_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isin = update.message.text.strip().upper()
    async with get_session() as session:
        bond_result = await session.execute(
            select(BondsDatabase).filter_by(isin=isin))
        bond = bond_result.scalar()

        if not bond:
            await update.message.reply_text("‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        context.user_data['isin'] = isin
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π:")
        return AWAITING_QUANTITY


async def handle_change_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    isin = query.data
    async with get_session() as session:
        bond_result = await session.execute(
            select(BondsDatabase).filter_by(isin=isin))
        bond = bond_result.scalar()

        if not bond:
            await query.answer("‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        context.user_data['isin'] = isin
        await query.answer()

        if query.message:
            await query.message.reply_text("üî¢ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π:")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

        return AWAITING_QUANTITY


# –í —Ä–∞–∑–¥–µ–ª –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ:
from datetime import datetime, timedelta


# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ bot.handlers.py:

async def upgrade_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with get_session() as session:
        subscription = await session.scalar(
            select(Subscription).where(Subscription.user_id == user.id)
        )  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞

        if not subscription:
            await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return

        text = f"üìã <b>–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        text += f"‚Ä¢ –¢–∞—Ä–∏—Ñ: {subscription.plan.capitalize() if subscription.plan else '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}\n"

        if subscription.payment_date:
            next_payment = subscription.payment_date + timedelta(days=30)
            text += f"‚Ä¢ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_payment.strftime('%d.%m.%Y')}\n"

        if subscription.subscription_end:
            text += f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.subscription_end.strftime('%d.%m.%Y')}\n"

        text += "\nüîê <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n" \
                "‚Ä¢ Basic - 10 –æ–±–ª–∏–≥–∞—Ü–∏–π (390‚ÇΩ/–º–µ—Å)\n" \
                "‚Ä¢ Optimal - 20 –æ–±–ª–∏–≥–∞—Ü–∏–π (590‚ÇΩ/–º–µ—Å)\n" \
                "‚Ä¢ Pro - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (990‚ÇΩ/–º–µ—Å)\n\n" \
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:"

        keyboard = [
            [InlineKeyboardButton("Basic", callback_data="upgrade_basic"),
             InlineKeyboardButton("Optimal", callback_data="upgrade_optimal")],
            [InlineKeyboardButton("Pro", callback_data="upgrade_pro")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="upgrade_cancel")]
        ]

        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )


async def handle_upgrade_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    user = query.from_user
    action = query.data.split("_")[1]

    async with get_session() as session:
        subscription = await session.scalar(
            select(Subscription).where(Subscription.user_id == user.id))

        if not subscription:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
            return

        if action == "cancel":
            await query.message.delete()
            return

        new_plan = action
        price_map = {"basic": 290, "optimal": 590, "pro": 990}

        is_upgrade_from_free = (subscription.plan == "free" and new_plan != "free")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if is_upgrade_from_free:
            subscription.is_subscribed = True
            subscription.subscription_start = datetime.now()
            subscription.subscription_end = datetime.now() + timedelta(days=30)
        elif new_plan == "free":  # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç –æ–ø—Ü–∏—è downgrade
            subscription.is_subscribed = False
            subscription.subscription_start = None
            subscription.subscription_end = None

        subscription.plan = new_plan
        subscription.payment_date = datetime.now()
        subscription.payment_amount = price_map.get(new_plan, 0)

        # –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if new_plan != "free" and not is_upgrade_from_free:
            subscription.subscription_end = subscription.subscription_end + timedelta(days=30)

        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = (
            f"‚úÖ –¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_plan.capitalize()}!\n"
            f"–°–ø–∏—Å–∞–Ω–æ: {price_map[new_plan]}‚ÇΩ\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {subscription.subscription_end.strftime('%d.%m.%Y')}"
        )
        await query.edit_message_text(response_text, parse_mode="HTML")


def register_handlers(app: Application):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_tracked_bonds))
    app.add_handler(CommandHandler("events", show_events))
    app.add_handler(CommandHandler("upgrade", upgrade_command))
    app.add_handler(CallbackQueryHandler(handle_upgrade_callback, pattern="^upgrade_"))

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            AWAITING_ISIN_TO_ADD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(ISIN_PATTERN), process_add_isin)],
            AWAITING_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)],
        },
        fallbacks=[],
    )
    app.add_handler(add_conv)

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π
    change_quantity_conv = ConversationHandler(
        entry_points=[CommandHandler("change_quantity", change_quantity)],
        states={
            AWAITING_ISIN_TO_CHANGE: [CallbackQueryHandler(handle_change_quantity_callback)],
            AWAITING_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)],
        },
        fallbacks=[
            MessageHandler(filters.TEXT & ~filters.COMMAND,
                           lambda update, context: print(f"Fallback: {update.message.text}"))
        ],
    )
    app.add_handler(change_quantity_conv)

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±–ª–∏–≥–∞—Ü–∏–∏
    remove_conv = ConversationHandler(
        entry_points=[CommandHandler("remove", remove_command)],
        states={
            AWAITING_ISIN_TO_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_remove_isin)],
        },
        fallbacks=[],
    )
    app.add_handler(remove_conv)
