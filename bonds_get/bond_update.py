# bonds_get.bond_update

from datetime import datetime
import logging
from sqlalchemy.orm import Session
from bonds_get.moex_lookup import get_bondization_data_from_moex
from database.db import BondsDatabase

logger = logging.getLogger("bond_update")


async def get_next_coupon(isin: str, figi: str | None, bond: BondsDatabase, session: Session) -> None:
    today = datetime.today().date()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–∞—Ö –∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è—Ö, –≤–∫–ª—é—á–∞—è –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è
        data = await get_bondization_data_from_moex(isin)
        coupons = data.get("coupons", [])
        amortizations = data.get("amortizations", [])
        maturity_date = data.get("maturity_date")  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è

        logging.debug(f"üßæ –í—Å–µ –∫—É–ø–æ–Ω—ã –æ—Ç MOEX –¥–ª—è {isin}: {coupons}")
        logging.debug(f"üí∏ –í—Å–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç MOEX –¥–ª—è {isin}: {amortizations}")
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞
        if maturity_date:
            bond.maturity_date = maturity_date
            logging.debug(f"üìÖ –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {bond.maturity_date}")
        session.commit()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—É–ø–æ–Ω–∞
        upcoming = []
        for c in coupons:
            raw_date = c.get("couponDate")
            if not raw_date:
                continue
            try:
                parsed_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                if parsed_date >= today:
                    c["parsed_date"] = parsed_date
                    upcoming.append(c)
            except ValueError:
                logging.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ {raw_date} –æ—Ç MOEX –¥–ª—è {isin}")
                continue

        if upcoming:
            upcoming.sort(key=lambda x: x["parsed_date"])
            first = upcoming[0]
            bond.next_coupon_date = first["parsed_date"]
            bond.next_coupon_value = float(first["couponValue"]) if first.get("couponValue") else None
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –∫—É–ø–æ–Ω: {bond.next_coupon_date}, {bond.next_coupon_value}")

        session.commit()

        upcoming_amortizations = []
        for a in amortizations:
            if a.get("dataSource") != "amortization":
                continue  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–∏–ø—É

            raw_date = a.get("amortDate")
            if not raw_date:
                continue

            try:
                parsed_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                if parsed_date >= today:
                    a["parsed_date"] = parsed_date
                    upcoming_amortizations.append(a)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {raw_date} –¥–ª—è ISIN {isin}")

        if upcoming_amortizations:
            upcoming_amortizations.sort(key=lambda x: x["parsed_date"])
            first_amort = upcoming_amortizations[0]
            bond.amortization_date = first_amort["parsed_date"]
            bond.amortization_value = float(first_amort.get("amortValue") or 0)
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {bond.amortization_date}, {bond.amortization_value}")

        session.commit()
        bond = session.query(BondsDatabase).filter_by(isin=isin).first()
        logger.debug(f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞: {bond.maturity_date}")
        logger.debug(f"üíæ Commit –∑–∞–≤–µ—Ä—à—ë–Ω: {bond}")
    except Exception as e:
        logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–∞ –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–ª—è {isin}: {e}")
