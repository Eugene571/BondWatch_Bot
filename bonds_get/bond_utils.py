# bonds_get.bond_utils.py
from typing import Optional

from bonds_get.bond_update import get_next_coupon
from bonds_get.moex_lookup import get_bond_coupons_from_moex
from sqlalchemy.orm import Session
from datetime import datetime

from database.db import BondsDatabase


def process_amortizations(events: dict, current_date: Optional[datetime] = None) -> tuple | None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π –∏ –ø–æ–≥–∞—à–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞—è –±–ª–∏–∂–∞–π—à–µ–µ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.

    :param events: —Å–ª–æ–≤–∞—Ä—å —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç API
    :param current_date: —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (datetime.datetime –æ–±—ä–µ–∫—Ç)
    :return: –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞—Ç–æ–π –∏ —Å—É–º–º–æ–π –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –∏–ª–∏ None
    """
    if current_date is None:
        current_date = datetime.now()

    future_amorts = []
    for event in events.get("data", []):
        amort_date = event.get("amortdate")
        if amort_date:
            parsed_date = datetime.strptime(amort_date, "%Y-%m-%d").date()
            if parsed_date >= current_date.date():
                future_amorts.append((parsed_date, event.get("value"), event.get("data_source")))

    if future_amorts:
        return min(future_amorts, key=lambda x: x[0])
    return None


def process_offers(events):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–µ—Ä—Ç—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞—Ç).

    :param events: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏–π –æ—Ñ–µ—Ä—Ç
    :return: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ–µ—Ä—Ç
    """
    offers = events['data']
    result = []
    for event in offers:
        offer_date = event.get('offerdate')
        price = event.get('price')
        result.append({
            'offer_date': offer_date,
            'price': price or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        })
    return result


async def save_bond_events(session: Session, tg_user_id: int, events: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–Ω–∞—á–∞—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –æ–±–ª–∏–≥–∞—Ü–∏–∏ –≤ –ë–î.
    """
    current_date = datetime.now()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∏–≥–∞—Ü–∏—é –≤ –ë–î
    bond = session.query(BondsDatabase).filter_by(user_id=tg_user_id, isin=events["isins"][0]).first()

    if not bond:
        bond = BondsDatabase(
            user_id=tg_user_id,
            isin=events["isins"][0],
            name=events["name"],
            added_at=datetime.utcnow(),
        )
        session.add(bond)
        session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    await get_next_coupon(events["isins"][0], None, bond, session)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é
    next_amort_event = process_amortizations(events.get("amortizations"), current_date)
    if next_amort_event:
        bond.next_amort_date = next_amort_event[0]
        bond.next_amort_value = next_amort_event[1]

    bond.last_updated = datetime.utcnow()
    session.commit()


def format_bond_info(session: Session, tg_user_id: int, isin: str):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.

    :param session: –°–µ–∞–Ω—Å SQLAlchemy
    :param tg_user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param isin: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–ª–∏–≥–∞—Ü–∏–∏ (ISIN)
    :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏
    """
    bond = (
        session.query(BondsDatabase)
        .filter_by(user_id=tg_user_id, isin=isin)
        .first()
    )

    if bond:
        message = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {isin}:\n\n"
        if bond.next_coupon_date:
            message += f"üìù –°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω:\n- –î–∞—Ç–∞: {bond.next_coupon_date}\n- –†–∞–∑–º–µ—Ä –∫—É–ø–æ–Ω–∞: {bond.next_coupon_value:.2f} —Ä—É–±.\n"
        else:
            message += "–°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—à—ë–ª.\n"
    else:
        message = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {isin}.\n"

    return message
