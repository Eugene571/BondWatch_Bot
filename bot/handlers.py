# bot.handlers.py
import sys

from sqlalchemy.orm import selectinload
from telegram import Update
from telegram.ext import (
    CommandHandler,
    Application,
    ContextTypes,
    filters,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler
)
import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
from datetime import datetime

from bonds_get.bond_update import get_next_coupon
from bonds_get.bond_utils import save_bond_events
from bonds_get.moex_lookup import get_bondization_data_from_moex
from bonds_get.moex_name_lookup import get_bond_name_from_moex
from database.db import get_session, User, BondsDatabase, UserTracking

ISIN_PATTERN = re.compile(r'^[A-Z]{2}[A-Z0-9]{10}$')

AWAITING_ISIN_TO_REMOVE = 1
AWAITING_ISIN_TO_ADD = 2
AWAITING_QUANTITY = 3
AWAITING_ISIN_TO_CHANGE = 4


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    session = get_session()

    db_user = session.query(User).filter_by(tg_id=user.id).first()
    if not db_user:
        db_user = User(tg_id=user.id, full_name=user.full_name)
        session.add(db_user)
        session.commit()
        context.bot_data.get("logger", print)(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø BondWatch ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –∫—É–ø–æ–Ω–∞–º–∏ –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è–º–∏ —Ç–≤–æ–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å ISIN, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –±—É–º–∞–≥—É –∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É–ø–æ–Ω–∞—Ö –∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏.\n"
        "–¢—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ 3 –±—É–º–∞–≥.\n\n"
        "üîî –ù–∞—á–Ω—ë–º!"
    )


async def list_tracked_bonds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User).options(selectinload(User.tracked_bonds)).filter_by(
        tg_id=update.effective_user.id).first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text(
            "‚ùóÔ∏è–¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add!")
        session.close()
        return

    text = "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥:\n\n"
    for ut in user.tracked_bonds:
        bond = session.query(BondsDatabase).filter_by(isin=ut.isin).first()
        if not bond:
            continue

        name = bond.name or bond.isin
        if not bond.name:
            moex_name = await get_bond_name_from_moex(bond.isin)
            if moex_name:
                bond.name = moex_name
                session.commit()
                name = moex_name

        added = ut.added_at.strftime("%Y-%m-%d")
        quantity = ut.quantity  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ –∏–∑ UserTracking

        next_coupon_text = ""  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É–ø–æ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        text += f"‚Ä¢ {name} - {quantity} –±—É–º–∞–≥ \n({bond.isin}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ {added}){next_coupon_text}\n\n"

    session.close()
    await update.message.reply_text(text)


async def process_add_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip().upper()

    if not ISIN_PATTERN.match(text):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ISIN. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return AWAITING_ISIN_TO_ADD

    session = get_session()
    user_db = session.query(User).filter_by(tg_id=user.id).first()
    if not user_db:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –±—É–º–∞–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    tracking_count = session.query(UserTracking).filter_by(user_id=user_db.id).count()
    if tracking_count >= 3:
        await update.message.reply_text("‚ùå –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å 3 –±—É–º–∞–≥–∏. –£–¥–∞–ª–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –±—É–º–∞–≥—É
    already_tracking = session.query(UserTracking).filter_by(user_id=user_db.id, isin=text).first()
    if already_tracking:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å —ç—Ç—É –±—É–º–∞–≥—É.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—É–º–∞–≥–µ
    bond = session.query(BondsDatabase).filter_by(isin=text).first()
    if not bond:
        name = await get_bond_name_from_moex(text)
        bond = BondsDatabase(isin=text, name=name)
        session.add(bond)
        session.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–µ –∏ –¥–∞—Ç–µ –ø–æ–≥–∞—à–µ–Ω–∏—è
    try:
        coupon = await get_next_coupon(bond.isin, bond.figi, bond, session)
        if coupon:
            bond.next_coupon_date = coupon["date"]
            bond.next_coupon_value = coupon["value"]
            session.commit()
    except Exception as e:
        logging.warning(f"T-API –∫—É–ø–æ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: {e}")

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω—ã —á–µ—Ä–µ–∑ T-API, –ø—Ä–æ–±—É–µ–º MOEX
    if not bond.next_coupon_date or not bond.next_coupon_value:
        try:
            moex_coupons = await get_bondization_data_from_moex(bond.isin)
            if moex_coupons:
                bond.next_coupon_date = moex_coupons[0]["date"]
                bond.next_coupon_value = moex_coupons[0]["value"]
                session.commit()
        except Exception as e:
            logging.warning(f"MOEX –∫—É–ø–æ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–º–∞–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tracking = UserTracking(user_id=user_db.id, isin=bond.isin)
    session.add(tracking)
    session.commit()

    context.user_data['isin'] = text

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ –¥–ª—è {bond.name or bond.isin}:")
    return AWAITING_QUANTITY


async def process_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.bot_data.get("logger", print)(
        f"‚û°Ô∏è process_quantity: update={update.message.text}, user_data={context.user_data}")
    try:
        quantity = int(update.message.text.strip())
        context.bot_data.get("logger", print)(f"‚û°Ô∏è process_quantity: quantity={quantity}")
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        session = get_session()
        user_db = session.query(User).filter_by(tg_id=update.effective_user.id).first()
        bond = session.query(BondsDatabase).filter_by(isin=context.user_data['isin']).first()

        if not user_db or not bond:
            await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END

        existing_tracking = session.query(UserTracking).filter_by(user_id=user_db.tg_id, isin=bond.isin).first()

        if existing_tracking:
            existing_tracking.quantity = quantity
            session.commit()
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±—É–º–∞–≥–∏ {bond.name or bond.isin} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {quantity}.")
        else:
            tracking = UserTracking(user_id=user_db.id, isin=bond.isin, quantity=quantity)
            session.add(tracking)
            session.commit()
            await update.message.reply_text(f"üìå –ë—É–º–∞–≥–∞ {bond.name or bond.isin} –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")

        session.close()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return AWAITING_QUANTITY
    except Exception as e:
        context.bot_data.get("logger", print)(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ process_quantity: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    return AWAITING_ISIN_TO_ADD


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üóë –í–≤–µ–¥–∏ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return AWAITING_ISIN_TO_REMOVE


async def process_remove_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isin = update.message.text.strip().upper()
    session = get_session()
    user = session.query(User).filter_by(tg_id=update.effective_user.id).first()

    if not user:
        await update.message.reply_text("–¢—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END

    tracking = session.query(UserTracking).filter_by(user_id=user.tg_id, isin=isin).first()
    if not tracking:
        await update.message.reply_text(f"‚ùå –¢—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –±—É–º–∞–≥—É —Å ISIN {isin}.")
    else:
        session.delete(tracking)
        session.commit()
        await update.message.reply_text(f"‚úÖ –ë—É–º–∞–≥–∞ {isin} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

    return ConversationHandler.END


async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User).options(selectinload(User.tracked_bonds)).filter_by(
        tg_id=update.effective_user.id).first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è –¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        return

    text = "üìä –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–≤–æ–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º:\n\n"
    for ut in user.tracked_bonds:
        bond = session.query(BondsDatabase).filter_by(isin=ut.isin).first()
        if not bond:
            continue
        name = bond.name or bond.isin
        if bond.next_coupon_date and bond.next_coupon_value and bond.maturity_date:
            total_coupon = ut.quantity * bond.next_coupon_value
            text += f"‚Ä¢ {name}:\n  üè∑Ô∏è {bond.next_coupon_date} ‚Äî –∫—É–ø–æ–Ω {bond.next_coupon_value:.2f} —Ä—É–±.\n"
            text += f"  üí∏üîô {bond.maturity_date} ‚Äî –ø–æ–≥–∞—à–µ–Ω–∏–µ\n"
            text += f"  üí∞ –ò—Ç–æ–≥–æ: {total_coupon:.2f} —Ä—É–±. –¥–ª—è {ut.quantity} –æ–±–ª–∏–≥–∞—Ü–∏–π\n\n"
        elif bond.next_coupon_date and bond.next_coupon_value and not bond.maturity_date:
            total_coupon = ut.quantity * bond.next_coupon_value
            text += f"‚Ä¢ {name}:\n  üè∑Ô∏è {bond.next_coupon_date} ‚Äî –∫—É–ø–æ–Ω {bond.next_coupon_value:.2f} —Ä—É–±.\n"
            text += f"  üí∞ –ò—Ç–æ–≥–æ: {total_coupon:.2f} —Ä—É–±. –¥–ª—è {ut.quantity} –æ–±–ª–∏–≥–∞—Ü–∏–π\n"
        else:
            text += f"‚Ä¢ {name}:\n  ‚ú® –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"

    await update.message.reply_text(text)


async def change_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = session.query(User).filter_by(tg_id=update.effective_user.id).first()

    if not user or not user.tracked_bonds:
        await update.message.reply_text("‚ùóÔ∏è –¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
    keyboard = []
    for ut in user.tracked_bonds:
        bond = session.query(BondsDatabase).filter_by(isin=ut.isin).first()
        keyboard.append(
            [InlineKeyboardButton(f"{bond.name or bond.isin} ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {ut.quantity}", callback_data=bond.isin)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏ –æ–±–ª–∏–≥–∞—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", reply_markup=reply_markup)
    return AWAITING_ISIN_TO_CHANGE


async def process_change_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isin = update.message.text.strip().upper()
    session = get_session()

    bond = session.query(BondsDatabase).filter_by(isin=isin).first()
    if not bond:
        await update.message.reply_text("‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    context.user_data['isin'] = isin
    await update.message.reply_text("üî¢ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π:")
    return AWAITING_QUANTITY


async def handle_change_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    isin = query.data  # –ü–æ–ª—É—á–∞–µ–º ISIN –∏–∑ callback_data

    context.bot_data.get("logger", print)(f"‚û°Ô∏è handle_change_quantity_callback: isin={isin}")

    session = get_session()
    bond = session.query(BondsDatabase).filter_by(isin=isin).first()
    if not bond:
        await query.answer("‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    context.user_data['isin'] = isin
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É

    context.bot_data.get("logger", print)(
        f"‚û°Ô∏è handle_change_quantity_callback: context.user_data['isin']={context.user_data.get('isin')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if query.message:
        await query.message.reply_text("üî¢ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π:")
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    logger = logging.getLogger(__name__)
    logger.info(f"‚û°Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {AWAITING_QUANTITY}")
    return AWAITING_QUANTITY  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


def register_handlers(app: Application):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_tracked_bonds))
    app.add_handler(CommandHandler("events", show_events))

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            AWAITING_ISIN_TO_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_add_isin)],
            AWAITING_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)],
        },
        fallbacks=[],
    )
    app.add_handler(add_conv)

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π
    change_quantity_conv = ConversationHandler(
        entry_points=[CommandHandler("change_quantity", change_quantity)],
        states={
            AWAITING_ISIN_TO_CHANGE: [CallbackQueryHandler(handle_change_quantity_callback)],
            AWAITING_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)],
        },
        fallbacks=[
            MessageHandler(filters.TEXT & ~filters.COMMAND,
                           lambda update, context: print(f"Fallback: {update.message.text}"))
        ],
    )
    app.add_handler(change_quantity_conv)
