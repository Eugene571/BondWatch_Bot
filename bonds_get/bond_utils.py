# bonds_get.bond_utils.py
import logging
from typing import Optional

from bonds_get.bond_update import get_next_coupon
from bonds_get.moex_lookup import get_bondization_data_from_moex
from sqlalchemy.orm import Session
from datetime import datetime

from database.db import BondsDatabase

logger = logging.getLogger("bonds_get.bond_utils")  # –õ–æ–≥–≥–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º


def process_amortizations(events: list | dict, current_date: Optional[datetime] = None) -> tuple | None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏ –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Ç–∞–∫ –∏ events['columns' + 'data'] —Ñ–æ—Ä–º–∞—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é –∏ –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞).
    """
    if current_date is None:
        current_date = datetime.now()

    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∞—Ç—ã: {current_date}")

    future_amorts = []
    maturity_date = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {"columns": [...], "data": [...]}
    if isinstance(events, list) and all("amortDate" in e for e in events):
        # –§–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (–∫–∞–∫ –≤ –ª–æ–≥–µ –≤—ã—à–µ)
        for event in events:
            try:
                amort_date = datetime.strptime(event.get("amortDate"), "%Y-%m-%d").date()
                amort_value = event.get("amortValue")
                event_type = event.get("type")

                if amort_date >= current_date.date():
                    future_amorts.append((amort_date, amort_value, event_type))
                    logging.info(f"–ë—É–¥—É—â–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {amort_date}, —Å—É–º–º–∞: {amort_value}, —Ç–∏–ø: {event_type}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {event} ‚Äî {e}")

    elif isinstance(events, dict) and "columns" in events and "data" in events:
        columns = events.get("columns", [])
        for row in events.get("data", []):
            event = dict(zip(columns, row))
            try:
                amort_date = event.get("amortdate")
                if amort_date:
                    parsed_date = datetime.strptime(amort_date, "%Y-%m-%d").date()
                    if event.get("data_source") == "maturity":
                        maturity_date = parsed_date
                        logger.info(f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {maturity_date}")
                    elif parsed_date >= current_date.date():
                        future_amorts.append((parsed_date, event.get("value_rub"), event.get("data_source")))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Ç—Ä–æ–∫–∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {event} ‚Äî {e}")
    else:
        logging.warning("–§–æ—Ä–º–∞—Ç –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")

    nearest_amort = min(future_amorts, key=lambda x: x[0]) if future_amorts else None

    if nearest_amort:
        logging.info(f"–ë–ª–∏–∂–∞–π—à–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {nearest_amort[0]}, —Å—É–º–º–∞: {nearest_amort[1]}")
    else:
        logging.info("–ë—É–¥—É—â–∏–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    return nearest_amort, maturity_date


def process_offers(events):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–µ—Ä—Ç—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞—Ç).

    :param events: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏–π –æ—Ñ–µ—Ä—Ç
    :return: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ–µ—Ä—Ç
    """
    offers = events['data']
    result = []
    for event in offers:
        offer_date = event.get('offerdate')
        price = event.get('price')
        result.append({
            'offer_date': offer_date,
            'price': price or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        })
    return result


async def save_bond_events(session: Session, tg_user_id: int, events):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–Ω–∞—á–∞—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –æ–±–ª–∏–≥–∞—Ü–∏–∏ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Å MOEX.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ dict (–æ–¥–Ω–∞ –æ–±–ª–∏–≥–∞—Ü–∏—è), —Ç–∞–∫ –∏ list (–Ω–µ—Å–∫–æ–ª—å–∫–æ).
    """
    current_date = datetime.now()

    logging.info(f"–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}. –î–∞–Ω–Ω—ã–µ: {events}")

    if isinstance(events, list):
        for item in events:
            await save_bond_events(session, tg_user_id, item)
        return

    if not isinstance(events, dict):
        logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ save_bond_events: {events}")
        return

    if not events.get("isin"):
        isin_from_args = events.get("secid") or events.get("SECID") or events.get("bond_isin")
        if isin_from_args:
            events["isin"] = isin_from_args
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω ISIN –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è: {isin_from_args}")
        else:
            logging.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω ISIN, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
            return

    isin = events.get("isin")
    name = events.get("name")

    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ISIN = {isin}, Name = {name}")

    bond = session.query(BondsDatabase).filter_by(isin=isin).first()

    if not bond:
        logging.info(f"–û–±–ª–∏–≥–∞—Ü–∏—è —Å ISIN {isin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.")
        bond = BondsDatabase(
            isin=isin,
            name=name,
            added_at=datetime.utcnow(),
        )
        session.add(bond)
        session.flush()

    await get_next_coupon(isin, None, bond, session)

    # –£—Å—Ç–æ–π—á–∏–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π
    amortizations = []

    if "amortizations" in events and isinstance(events["amortizations"], list):
        amortizations = events["amortizations"]
        logging.info("–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π.")
    elif "columns" in events and "data" in events:
        amortizations = events
        logging.info("–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å columns + data.")
    else:
        logging.info("–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

    next_amort_event, maturity_date = process_amortizations(amortizations, current_date)

    if next_amort_event:
        logging.info(f"–°–ª–µ–¥—É—é—â–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {next_amort_event[0]}, {next_amort_event[1]}")
        bond.amortization_date = next_amort_event[0]
        bond.amortization_value = next_amort_event[1]
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {next_amort_event[0]}, {next_amort_event[1]}")
    else:
        logging.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    if not bond.maturity_date and maturity_date:
        bond.maturity_date = maturity_date
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {maturity_date}")

    bond.last_updated = datetime.utcnow()
    session.commit()
    bond = session.query(BondsDatabase).filter_by(isin=isin).first()

    logger.debug(f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞: {bond.maturity_date}")
    logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å ISIN {isin} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ.")


def format_bond_info(session: Session, tg_user_id: int, isin: str):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.

    :param session: –°–µ–∞–Ω—Å SQLAlchemy
    :param tg_user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param isin: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–ª–∏–≥–∞—Ü–∏–∏ (ISIN)
    :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏
    """
    bond = (
        session.query(BondsDatabase)
        .filter_by(user_id=tg_user_id, isin=isin)
        .first()
    )

    if bond:
        message = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {isin}:\n\n"
        if bond.next_coupon_date:
            message += f"üìù –°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω:\n- –î–∞—Ç–∞: {bond.next_coupon_date}\n- –†–∞–∑–º–µ—Ä –∫—É–ø–æ–Ω–∞: {bond.next_coupon_value:.2f} —Ä—É–±.\n"
        else:
            message += "–°–ª–µ–¥—É—é—â–∏–π –∫—É–ø–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—à—ë–ª.\n"
    else:
        message = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {isin}.\n"

    return message
