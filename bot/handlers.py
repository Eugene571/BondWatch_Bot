# bot.handlers.py
import asyncio
import html
import logging
import os
import re
from datetime import datetime, timedelta

from sqlalchemy import select, update
from sqlalchemy.orm import selectinload
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update, Message
from telegram.constants import ParseMode
from telegram.ext import (
    CommandHandler,
    Application,
    ContextTypes,
    filters,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler, PreCheckoutQueryHandler
)
from yookassa import Configuration, Payment

from bonds_get.bond_update import get_next_coupon
from bonds_get.bond_utils import is_bond
from bonds_get.moex_name_lookup import get_bond_name_from_moex
from bot.subscription_utils import check_tracking_limit
from database.db import get_session, User, BondsDatabase, UserTracking, Subscription

Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

ISIN_PATTERN = re.compile(r'^[A-Z]{2}[A-Z0-9]{9}\d$')

AWAITING_ISIN_TO_REMOVE = 1
AWAITING_ISIN_TO_ADD = 2
AWAITING_QUANTITY = 3
AWAITING_ISIN_TO_CHANGE = 4
AWAITING_SUPPORT_MESSAGE = 5


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with get_session() as session:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        result = await session.execute(select(User).filter_by(tg_id=user.id))
        db_user = result.scalar()
        if not db_user:
            db_user = User(tg_id=user.id, full_name=user.full_name)
            session.add(db_user)
            await session.commit()
            subscription = Subscription(user_id=user.id, plan="free")
            session.add(subscription)
            await session.commit()
        context.bot_data.get("logger", print)(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø BondWatch ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏ –ø–æ –≤–∞—à–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º.\n\n"
        "üìé –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º\n\n"
        "üìé –í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å 1 –±—É–º–∞–≥—É\n\n"
        "üìé –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upgrade\n\n"
        "üîî –ù–∞—á–Ω—ë–º!"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìö <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>

üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
/list - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π  
/events - –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è  
/upgrade - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π  
/support - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

üîπ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏</b>  
/add - –î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏—é  
/remove - –£–¥–∞–ª–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏—é  
/change_quantity - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥  

üîπ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã</b>  
üìå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å <b>—Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏</b>  
üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è:  
 ‚Ä¢ –ö—É–ø–æ–Ω—ã  
 ‚Ä¢ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏  
 ‚Ä¢ –ü–æ–≥–∞—à–µ–Ω–∏—è  
 ‚Ä¢ –û—Ñ–µ—Ä—Ç—ã  

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>  
‚è∞ –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ 12:00 –ø–æ –ú–°–ö:  
 ‚Ä¢ –ö—É–ø–æ–Ω—ã/–∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ - –∑–∞ 1 –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è  
 ‚Ä¢ –ü–æ–≥–∞—à–µ–Ω–∏—è - –∑–∞ 7 –¥–Ω–µ–π  
 ‚Ä¢ –û—Ñ–µ—Ä—Ç—ã - –∑–∞ 14 –¥–Ω–µ–π  
 ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>  
–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ—Ñ–µ—Ä—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–∞–Ω–µ–µ —É—Ç–æ—á–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —É –≤–∞—à–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞. –ë–æ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –¥–∞—Ç–µ –æ—Ñ–µ—Ä—Ç—ã.  

üìå <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏—é?</b>  
1. –ù–∞–π—Ç–∏ ISIN –Ω–∞ <a href="https://www.moex.com/">MOEX</a>  
2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å: <code>/add RU000A10AV15</code>  
3. –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥  

üíé <b>–¢–∞—Ä–∏—Ñ—ã:</b>  
üî∏ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 1 –æ–±–ª–∏–≥–∞—Ü–∏—è  
üî∏ –ü–ª–∞—Ç–Ω–æ: 10/20/‚àû –±—É–º–∞–≥  

‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b> –ù–∞–ø–∏—à–∏—Ç–µ /support  
    """
    await update.message.reply_text(
        help_text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        disable_notification=True
    )


async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
    await update.message.reply_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú–æ–∂–Ω–æ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç (–∫–∞–∫ —Ñ–æ—Ç–æ)\n\n"
        "‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å /cancel",
        parse_mode=ParseMode.HTML
    )
    return AWAITING_SUPPORT_MESSAGE


async def process_support_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã) –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user = update.effective_user
    caption = update.message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

    support_text = (
        f"üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username or '–Ω–µ—Ç'}, ID: {user.id})\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {caption}"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (–≤–∞—à tg_id: 247176848)
        if update.message.photo:
            photo_file = await update.message.photo[-1].get_file()
            await context.bot.send_photo(
                chat_id=247176848,
                photo=photo_file.file_id,
                caption=support_text,
                parse_mode=ParseMode.HTML
            )
        elif update.message.document:
            doc_file = await update.message.document.get_file()
            await context.bot.send_document(
                chat_id=247176848,
                document=doc_file.file_id,
                caption=support_text,
                parse_mode=ParseMode.HTML
            )

        await update.message.reply_text("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    return ConversationHandler.END


async def forward_text(user: User, text: str, context: ContextTypes.DEFAULT_TYPE):
    support_text = (
        f"üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>\n"
        f"üë§ {user.mention_html()}\n"
        f"üÜî ID: {user.id}\n\n"
        f"üìù {html.escape(text)}"
    )
    await context.bot.send_message(
        chat_id=247176848,
        text=support_text,
        parse_mode=ParseMode.HTML
    )


async def forward_media(user: User, message: Message, caption: str, context: ContextTypes.DEFAULT_TYPE):
    support_text = (
        f"üÜò <b>–ú–µ–¥–∏–∞ –æ—Ç {user.mention_html()}</b>\n"
        f"üÜî ID: {user.id}\n"
        f"üìù {html.escape(caption)}"
    )

    if message.photo:
        await context.bot.send_photo(
            chat_id=247176848,
            photo=message.photo[-1].file_id,
            caption=support_text,
            parse_mode=ParseMode.HTML
        )
    elif message.document:
        await context.bot.send_document(
            chat_id=247176848,
            document=message.document.file_id,
            caption=support_text,
            parse_mode=ParseMode.HTML
        )


async def process_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ –ø–æ–¥–ø–∏—Å—å—é
        if update.message.caption or update.message.photo or update.message.document:
            caption = update.message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            await forward_media(user, update.message, caption, context)

        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –º–µ–¥–∏–∞
        elif update.message.text:
            await forward_text(user, update.message.text, context)

        await update.message.reply_text("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")

    return ConversationHandler.END


async def cancel_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def list_tracked_bonds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_session() as session:
        result = await session.execute(
            select(User)
            .options(selectinload(User.tracked_bonds))
            .filter_by(tg_id=update.effective_user.id)
        )
        user = result.scalar()

        if not user or not user.tracked_bonds:
            await update.message.reply_text("‚ùóÔ∏è–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.")
            return

        text = "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥:\n\n"
        for ut in user.tracked_bonds:
            bond_result = await session.execute(select(BondsDatabase).filter_by(isin=ut.isin))
            bond = bond_result.scalar()

            name = bond.name or bond.isin
            if not bond.name:
                moex_name = await get_bond_name_from_moex(bond.isin)
                if moex_name:
                    bond.name = moex_name
                    await session.commit()
                    name = moex_name

            text += f"‚Ä¢ {name} - {ut.quantity} –±—É–º–∞–≥ \n({bond.isin}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ {ut.added_at.strftime('%Y-%m-%d')})\n\n"

        await update.message.reply_text(text)


async def process_add_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    if not text.isascii():
        await update.message.reply_text(
            "‚ùå ISIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ISIN –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        return AWAITING_ISIN_TO_ADD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ISIN
    if not ISIN_PATTERN.match(text):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISIN.\n"
            "–§–æ—Ä–º–∞—Ç: 2 –±—É–∫–≤—ã + 9 —Å–∏–º–≤–æ–ª–æ–≤ + 1 —Ü–∏—Ñ—Ä–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: RU000A0JX0J6\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ISIN –ø–æ–≤—Ç–æ—Ä–Ω–æ"
        )
        return AWAITING_ISIN_TO_ADD

    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–ª–∏–≥–∞—Ü–∏—é —á–µ—Ä–µ–∑ MOEX API
    if not await is_bond(text):
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ISIN –∏–ª–∏ –±—É–º–∞–≥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±–ª–∏–≥–∞—Ü–∏–µ–π.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return AWAITING_ISIN_TO_ADD

    async with get_session() as session:
        user_result = await session.execute(select(User).filter_by(tg_id=user.id))
        user_db = user_result.scalar()

        if not user_db:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
        if not await check_tracking_limit(user_db.tg_id):
            await update.message.reply_text(
                "‚ùå –õ–∏–º–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –±—É–º–∞–≥ –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: /upgrade"
            )
            return ConversationHandler.END

        tracking_result = await session.execute(
            select(UserTracking).filter_by(user_id=user_db.tg_id, isin=text))
        if tracking_result.scalar():
            await update.message.reply_text("‚úÖ –≠—Ç–∞ –±—É–º–∞–≥–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            return ConversationHandler.END

        bond_result = await session.execute(select(BondsDatabase).filter_by(isin=text))
        bond = bond_result.scalar()

        if not bond:
            name = await get_bond_name_from_moex(text)
            bond = BondsDatabase(isin=text, name=name)
            session.add(bond)
            await session.commit()

        try:
            coupon = await get_next_coupon(bond.isin, bond.figi, bond, session)
            if coupon:
                bond.next_coupon_date = coupon["date"]
                bond.next_coupon_value = coupon["value"]
                await session.commit()
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞: {e}")

        tracking = UserTracking(user_id=user_db.tg_id, isin=bond.isin)
        session.add(tracking)
        await session.commit()

        context.user_data['isin'] = text
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ –¥–ª—è {bond.name or bond.isin}:")
        return AWAITING_QUANTITY


async def process_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        quantity = int(update.message.text.strip())
        if quantity <= 0:
            raise ValueError

        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_result = await session.execute(
                select(User).filter_by(tg_id=update.effective_user.id)
            )
            bond_result = await session.execute(
                select(BondsDatabase).filter_by(isin=context.user_data['isin'])
            )
            user_db = user_result.scalar()
            bond = bond_result.scalar()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            tracking_result = await session.execute(
                select(UserTracking).filter_by(user_id=user_db.tg_id, isin=bond.isin)
            )
            existing_tracking = tracking_result.scalar()

            if existing_tracking:
                existing_tracking.quantity = quantity
                await session.commit()
                await update.message.reply_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {quantity}")
            else:
                tracking = UserTracking(user_id=user_db.tg_id, isin=bond.isin, quantity=quantity)
                session.add(tracking)
                await session.commit()
                await update.message.reply_text(f"üìå –û–±–ª–∏–≥–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")

        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        return AWAITING_QUANTITY
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
        return ConversationHandler.END


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏—Ç–µ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    return AWAITING_ISIN_TO_ADD


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üóë –í–≤–µ–¥–∏—Ç–µ ISIN –±—É–º–∞–≥–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    return AWAITING_ISIN_TO_REMOVE


async def process_remove_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isin = update.message.text.strip().upper()
    async with get_session() as session:
        user_result = await session.execute(
            select(User).filter_by(tg_id=update.effective_user.id))
        user = user_result.scalar()

        if not user:
            await update.message.reply_text("–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
            return ConversationHandler.END

        tracking_result = await session.execute(
            select(UserTracking).filter_by(user_id=user.tg_id, isin=isin))
        tracking = tracking_result.scalar()
        if tracking:
            await session.delete(tracking)
            await session.commit()
            await update.message.reply_text(f"‚úÖ –ë—É–º–∞–≥–∞ {isin} —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text(f"‚ùå –ë—É–º–∞–≥–∞ {isin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        return ConversationHandler.END


async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_session() as session:
        user_result = await session.execute(
            select(User)
            .options(selectinload(User.tracked_bonds))
            .filter_by(tg_id=update.effective_user.id)
        )
        user = user_result.scalar()

        if not user or not user.tracked_bonds:
            await update.message.reply_text(
                "‚ùóÔ∏è –í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.\n–î–æ–±–∞–≤—å—Ç–µ –±—É–º–∞–≥—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ /add")
            return

        text = "üìä –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–∞—à–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º:\n\n"
        for ut in user.tracked_bonds:
            bond_result = await session.execute(
                select(BondsDatabase).filter_by(isin=ut.isin))
            bond = bond_result.scalar()

            if not bond:
                continue

            name = bond.name or bond.isin
            quantity = ut.quantity or 1
            event_lines = []

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ø–æ–Ω–æ–≤
            if bond.next_coupon_date:
                coupon_status = []
                if bond.next_coupon_value is not None and bond.next_coupon_value != 0:
                    total_coupon = quantity * bond.next_coupon_value
                    coupon_status.append(
                        f"–∫—É–ø–æ–Ω {bond.next_coupon_value:.2f} —Ä—É–±.\n"
                        f"üí∞–ò—Ç–æ–≥–æ: {total_coupon:.2f} —Ä—É–±. –¥–ª—è {quantity} —à—Ç."
                    )
                else:
                    coupon_status.append("—Ä–∞–∑–º–µ—Ä –∫—É–ø–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")

                event_lines.append(
                    f"üè∑Ô∏è {bond.next_coupon_date} ‚Äî " + "\n".join(coupon_status)
                )

            # –ü–æ–≥–∞—à–µ–Ω–∏–µ
            if bond.maturity_date:
                event_lines.append(f"üí∏üîô {bond.maturity_date} ‚Äî –ø–æ–≥–∞—à–µ–Ω–∏–µ")

            # –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è
            if bond.amortization_date:
                amort_status = []
                if bond.amortization_value is not None:
                    amort_status.append(f"{bond.amortization_value:.2f} —Ä—É–±.")
                else:
                    amort_status.append("—Å—É–º–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

                event_lines.append(
                    f"‚¨áÔ∏è –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è {bond.amortization_date} ‚Äî " + "\n".join(amort_status)
                )

            # –û—Ñ–µ—Ä—Ç–∞
            if bond.offer_date:
                event_lines.append(f"ü§ùüìù –û—Ñ–µ—Ä—Ç–∞ ‚Äî {bond.offer_date}")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
            if event_lines:
                text += f"‚Ä¢ {name}:\n" + "\n".join([f"  {line}" for line in event_lines]) + "\n\n"
            else:
                text += f"‚Ä¢ {name}:\n  ‚ú® –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n\n"

        await update.message.reply_text(text)


async def change_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_session() as session:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –±—É–º–∞–≥–∞–º–∏
        user_result = await session.execute(
            select(User)
            .options(selectinload(User.tracked_bonds))
            .filter_by(tg_id=update.effective_user.id))
        user = user_result.scalar()

        if not user or not user.tracked_bonds:
            await update.message.reply_text(
                "‚ùóÔ∏è –í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.\n–î–æ–±–∞–≤—å—Ç–µ –±—É–º–∞–≥—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ /add")
            return

        keyboard = []
        for ut in user.tracked_bonds:
            bond_result = await session.execute(
                select(BondsDatabase).filter_by(isin=ut.isin))
            bond = bond_result.scalar()

            if bond:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{bond.name or bond.isin} ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {ut.quantity}",
                        callback_data=bond.isin
                    )
                ])

        await update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∏–≥–∞—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return AWAITING_ISIN_TO_CHANGE


async def process_change_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isin = update.message.text.strip().upper()
    async with get_session() as session:
        bond_result = await session.execute(
            select(BondsDatabase).filter_by(isin=isin))
        bond = bond_result.scalar()

        if not bond:
            await update.message.reply_text("‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        context.user_data['isin'] = isin
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π:")
        return AWAITING_QUANTITY


async def handle_change_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    isin = query.data
    async with get_session() as session:
        bond_result = await session.execute(
            select(BondsDatabase).filter_by(isin=isin))
        bond = bond_result.scalar()

        if not bond:
            await query.answer("‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        context.user_data['isin'] = isin
        await query.answer()

        if query.message:
            await query.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π:")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

        return AWAITING_QUANTITY


async def upgrade_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîê <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n"
        "‚Ä¢ Basic - 10 –æ–±–ª–∏–≥–∞—Ü–∏–π (390‚ÇΩ/–º–µ—Å)\n"
        "‚Ä¢ Optimal - 20 –æ–±–ª–∏–≥–∞—Ü–∏–π (590‚ÇΩ/–º–µ—Å)\n"
        "‚Ä¢ Pro - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (990‚ÇΩ/–º–µ—Å)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"Basic - 390‚ÇΩ/–º–µ—Å", callback_data="upgrade_basic")],
            [InlineKeyboardButton(f"Optimal - 590‚ÇΩ/–º–µ—Å", callback_data="upgrade_optimal")],
            [InlineKeyboardButton(f"Pro - 990‚ÇΩ/–º–µ—Å", callback_data="upgrade_pro")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upgrade_cancel")]
        ]),
        parse_mode="HTML"
    )


async def handle_upgrade_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    action = query.data.split("_")[1]

    if action == "cancel":
        await query.message.delete()
        return

    price_map = {
        "basic": 390.00,
        "optimal": 590.00,
        "pro": 990.00
    }

    async with get_session() as session:
        subscription = await session.scalar(
            select(Subscription).where(Subscription.user_id == user.id)
        )

        if not subscription:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
        payment = await create_yookassa_payment(
            user_id=user.id,
            amount=price_map[action],
            plan=action
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data['pending_payment'] = {
            "payment_id": payment.id,
            "plan": action
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await query.message.reply_text(
            f"‚ö†Ô∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ {action.capitalize()} –æ–ø–ª–∞—Ç–∏—Ç–µ {price_map[action]}‚ÇΩ\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment.confirmation.confirmation_url}\n\n"
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–∏–Ω—É—Ç."
        )
        await query.message.delete()


async def create_yookassa_payment(user_id: int, amount: float, plan: str):
    try:
        description = f"–¢–∞—Ä–∏—Ñ {plan.capitalize()} –¥–ª—è BondWatch"  # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏

        payment_data = {
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/BondWatch_bot"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            },
            "description": description,
            "metadata": {
                "user_id": user_id,
                "plan": plan
            },
            "receipt": {  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
                "customer": {
                    "email": f"{user_id}@telegram.org"  # –ü—Ä–∏–º–µ—Ä email.  –í–∞–∂–Ω–æ!  –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å.
                },
                "items": [
                    {
                        "description": description,
                        "quantity": "1",
                        "amount": {
                            "value": f"{amount:.2f}",
                            "currency": "RUB"
                        },
                        "vat_code": "1"  # –ö–æ–¥ –ù–î–°.  –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è.
                    }
                ]
            },
            "save_payment_method": True # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        }

        payment = await asyncio.to_thread(
            Payment.create,
            payment_data
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
        async with get_session() as session:
            subscription = await session.scalar(
                select(Subscription).where(Subscription.user_id == user_id)
            )
            if subscription:
                subscription.pending_payment_id = payment.id
                await session.commit()

        return payment
    except Exception as e:
        logging.error(f"Payment creation error: {str(e)}")
        raise


async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)


async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = update.message.from_user.id
    payment_info = update.message.successful_payment
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ YooKassa API
        payment_id = payment_info.provider_payment_charge_id
        payment = await asyncio.to_thread(Payment.find_one, payment_id)
        plan = payment.metadata.get("plan", "basic")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–ª–∞–Ω: {plan} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        plan = "basic"  # Fallback

    async with get_session() as session:
        try:
            subscription = await session.scalar(
                select(Subscription).where(Subscription.user_id == user_id)
            )

            if not subscription:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                logging.error(f"Subscription not found for user {user_id}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription.is_subscribed = True
            subscription.subscription_start = datetime.now()
            subscription.plan = plan  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            duration = timedelta(days=30)
            subscription.subscription_end = datetime.now() + duration

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            subscription.payment_status = "success"
            subscription.payment_date = datetime.now()
            subscription.payment_amount = float(payment_info.total_amount / 100)
            subscription.pending_payment_id = None  # –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂

            await session.commit()
            logging.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ {plan.capitalize()}. "
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription.subscription_end.strftime('%d.%m.%Y')}"
            )

        except Exception as e:
            logging.critical(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
            await session.rollback()
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    context.user_data.clear()


async def disable_auto_renew(user_id: int):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª—è—è payment_method_id."""
    async with get_session() as session:
        try:
            result = await session.execute(
                update(Subscription)
                .where(Subscription.user_id == user_id)
                .values(payment_method_id=None, auto_renew=False)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è
            )
            await session.commit()
            if result.rowcount > 0:
                logging.info(f"–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            else:
                logging.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await session.rollback()
            return False


async def inform_user_auto_renew_disabled(user_id: int, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞."""
    try:
        await bot.send_message(user_id, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
async def handle_disable_auto_renew_command(update, context):
    user_id = update.message.from_user.id
    if await disable_auto_renew(user_id):
        await inform_user_auto_renew_disabled(user_id, context.bot)
    else:
        await context.bot.send_message(user_id,
                                       "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")


def register_handlers(app: Application):
    # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∏
    app.add_handler(CommandHandler("start", start), group=0)
    app.add_handler(CommandHandler("help", help_command), group=0)
    app.add_handler(CommandHandler("list", list_tracked_bonds), group=0)
    app.add_handler(CommandHandler("events", show_events), group=0)
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    app.add_handler(CallbackQueryHandler(handle_upgrade_callback, pattern="^upgrade_"), group=0)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
    app.add_handler(CommandHandler("disable_autorenew", handle_disable_auto_renew_command), group=0)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("add", add_command),
            CommandHandler("remove", remove_command),
            CommandHandler("change_quantity", change_quantity),
            CommandHandler("support", support_command),
            CommandHandler("upgrade", upgrade_command)
        ],
        states={
            AWAITING_ISIN_TO_ADD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_add_isin)
            ],
            AWAITING_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_quantity)
            ],
            AWAITING_ISIN_TO_REMOVE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_remove_isin)
            ],
            AWAITING_ISIN_TO_CHANGE: [
                CallbackQueryHandler(handle_change_quantity_callback)
            ],
            AWAITING_SUPPORT_MESSAGE: [
                MessageHandler(
                    filters.TEXT | filters.PHOTO | filters.ATTACHMENT | filters.CAPTION,
                    process_support_message
                )
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("cancel_support", cancel_support)
        ],
        allow_reentry=True,
        per_chat=True,
        per_user=True,
        per_message=False
    )
    app.add_handler(conv_handler, group=1)
