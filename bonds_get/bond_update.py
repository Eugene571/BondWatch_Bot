# bonds_get.bond_update

from datetime import datetime
import logging
from sqlalchemy.orm import Session
from bonds_get.moex_lookup import get_bondization_data_from_moex
from database.db import BondsDatabase

logger = logging.getLogger("bond_update")


async def get_next_coupon(isin: str, figi: str | None, bond: BondsDatabase, session: Session) -> None:
    today = datetime.today().date()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–∞—Ö, –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è—Ö –∏ –æ—Ñ–µ—Ä—Ç–∞—Ö
        data = await get_bondization_data_from_moex(isin)
        coupons = data.get("coupons", [])
        amortizations = data.get("amortizations", [])
        maturity_date = data.get("maturity_date")
        next_offer_date = data.get("next_offer_date")  # –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ñ–µ—Ä—Ç—ã

        logging.debug(f"üßæ –í—Å–µ –∫—É–ø–æ–Ω—ã –æ—Ç MOEX –¥–ª—è {isin}: {coupons}")
        logging.debug(f"üí∏ –í—Å–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç MOEX –¥–ª—è {isin}: {amortizations}")
        logging.debug(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã: {next_offer_date}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞—Ç—É –æ—Ñ–µ—Ä—Ç—ã

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è –∏ –æ—Ñ–µ—Ä—Ç—ã
        updates_made = False
        if maturity_date:
            bond.maturity_date = maturity_date
            logging.debug(f"üìÖ –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {bond.maturity_date}")
            updates_made = True

        if next_offer_date:  # –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ offer_date
            bond.offer_date = next_offer_date
            logging.debug(f"üìÜ –î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {bond.offer_date}")
            updates_made = True

        if updates_made:
            session.commit()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—É–ø–æ–Ω–∞
        upcoming = []
        for c in coupons:
            raw_date = c.get("couponDate")
            if not raw_date:
                continue
            try:
                parsed_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                if parsed_date >= today:
                    c["parsed_date"] = parsed_date
                    upcoming.append(c)
            except ValueError:
                logging.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ {raw_date} –æ—Ç MOEX –¥–ª—è {isin}")
                continue

        if upcoming:
            upcoming.sort(key=lambda x: x["parsed_date"])
            first = upcoming[0]
            bond.next_coupon_date = first["parsed_date"]
            bond.next_coupon_value = float(first["couponValue"]) if first.get("couponValue") else None
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –∫—É–ø–æ–Ω: {bond.next_coupon_date}, {bond.next_coupon_value}")
            session.commit()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π
        upcoming_amortizations = []
        for a in amortizations:
            if a.get("dataSource") != "amortization":
                continue

            raw_date = a.get("amortDate")
            if not raw_date:
                continue

            try:
                parsed_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
                if parsed_date >= today:
                    a["parsed_date"] = parsed_date
                    upcoming_amortizations.append(a)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏: {raw_date} –¥–ª—è ISIN {isin}")

        if upcoming_amortizations:
            upcoming_amortizations.sort(key=lambda x: x["parsed_date"])
            first_amort = upcoming_amortizations[0]
            bond.amortization_date = first_amort["parsed_date"]
            bond.amortization_value = float(first_amort.get("amortValue") or 0)
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {bond.amortization_date}, {bond.amortization_value}")
            session.commit()

        # –§–∏–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        bond = session.query(BondsDatabase).filter_by(isin=isin).first()
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: "
                     f"–ø–æ–≥–∞—à–µ–Ω–∏–µ={bond.maturity_date}, "
                     f"–æ—Ñ–µ—Ä—Ç–∞={bond.offer_date}, "
                     f"–∫—É–ø–æ–Ω={bond.next_coupon_date}")
        logger.debug(f"üíæ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–∞ –¥–ª—è {isin}")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {isin}: {e}", exc_info=True)
        session.rollback()
