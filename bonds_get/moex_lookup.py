# bonds_get.moex_lookup.py
import httpx
import logging
import json


async def get_bond_coupons_from_moex(isin: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–ø–æ–Ω–æ–≤ –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å MOEX –ø–æ ISIN —á–µ—Ä–µ–∑ bondization.json."""
    url = f"https://iss.moex.com/iss/securities/{isin}/bondization.json"

    try:
        logging.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ MOEX –¥–ª—è ISIN {isin} –ø–æ URL: {url}")

        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å JSON-–æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)
        logging.info(f"üì¶ –û—Ç–≤–µ—Ç –æ—Ç MOEX –¥–ª—è {isin}: {json.dumps(data, indent=2, ensure_ascii=False)[:3000]}...")

        coupons_metadata = data.get("coupons", {}).get("columns", [])
        coupons_data = data.get("coupons", {}).get("data", [])

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            idx_coupondate = coupons_metadata.index("coupondate")  # –î–∞—Ç–∞ –∫—É–ø–æ–Ω–∞
            idx_value = coupons_metadata.index("value")  # –°—É–º–º–∞ –∫—É–ø–æ–Ω–∞
            idx_percent = coupons_metadata.index("valueprc")  # –ü—Ä–æ—Ü–µ–Ω—Ç –∫—É–ø–æ–Ω–∞
        except ValueError as e:
            logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –≤ bondization.json –¥–ª—è {isin}: {e}")
            return []

        coupons = []
        for row in coupons_data:
            coupon_date = row[idx_coupondate]
            coupon_value = row[idx_value] or 0
            coupon_percent = row[idx_percent] or 0

            if not coupon_date:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç–æ–π –∫—É–ø–æ–Ω–∞ –¥–ª—è {isin}")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–∞—Ç—ã

            coupons.append({
                "couponDate": str(coupon_date),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                "couponValue": coupon_value,
                "couponPercent": coupon_percent,
                "type": "COUPON"
            })

        logging.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(coupons)} –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è {isin}")
        return coupons

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤ —Å –ú–û–ï–ö–° –¥–ª—è {isin}: {e}")
        return []


async def get_bond_amortizations_from_moex(isin: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π –∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å MOEX –ø–æ ISIN —á–µ—Ä–µ–∑ bondization.json."""
    url = f"https://iss.moex.com/iss/securities/{isin}/bondization.json"
    try:
        logging.info(f"üîÑ –ó–∞–ø—Ä–æ—Å –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π –∫ MOEX –¥–ª—è ISIN {isin} –ø–æ URL: {url}")
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()
            logging.debug(f"üì¶ –û—Ç–≤–µ—Ç –æ—Ç MOEX (–∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏) –¥–ª—è {isin}: {json.dumps(data.get('amortizations'), indent=2, ensure_ascii=False)[:500]}...")

        return data.get("amortizations", {"columns": [], "data": []})

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π —Å –ú–û–ï–ö–° –¥–ª—è {isin}: {e}")
        return {"columns": [], "data": []}